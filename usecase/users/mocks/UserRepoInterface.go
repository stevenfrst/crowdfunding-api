// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "github.com/stevenfrst/crowdfunding-api/usecase/users"
	mock "github.com/stretchr/testify/mock"
)

// UserRepoInterface is an autogenerated mock type for the UserRepoInterface type
type UserRepoInterface struct {
	mock.Mock
}

// CheckLogin provides a mock function with given fields: email, password
func (_m *UserRepoInterface) CheckLogin(email string, password string) (users.Domain, error) {
	ret := _m.Called(email, password)

	var r0 users.Domain
	if rf, ok := ret.Get(0).(func(string, string) users.Domain); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(users.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserByID provides a mock function with given fields: id
func (_m *UserRepoInterface) DeleteUserByID(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields:
func (_m *UserRepoInterface) GetAllUser() ([]users.Domain, error) {
	ret := _m.Called()

	var r0 []users.Domain
	if rf, ok := ret.Get(0).(func() []users.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailByID provides a mock function with given fields: id
func (_m *UserRepoInterface) GetEmailByID(id int) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTransaction provides a mock function with given fields: id
func (_m *UserRepoInterface) GetUserTransaction(id int) (users.DomainTransaction, error) {
	ret := _m.Called(id)

	var r0 users.DomainTransaction
	if rf, ok := ret.Get(0).(func(int) users.DomainTransaction); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.DomainTransaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: user
func (_m *UserRepoInterface) Register(user *users.Domain) (users.Domain, error) {
	ret := _m.Called(user)

	var r0 users.Domain
	if rf, ok := ret.Get(0).(func(*users.Domain) users.Domain); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(users.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.Domain) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPassword provides a mock function with given fields: update
func (_m *UserRepoInterface) UpdateUserPassword(update users.DomainUpdate) (string, error) {
	ret := _m.Called(update)

	var r0 string
	if rf, ok := ret.Get(0).(func(users.DomainUpdate) string); ok {
		r0 = rf(update)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.DomainUpdate) error); ok {
		r1 = rf(update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
