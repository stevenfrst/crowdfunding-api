// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	campaign "github.com/stevenfrst/crowdfunding-api/usecase/campaign"
	mock "github.com/stretchr/testify/mock"
)

// CampaignRepoInterface is an autogenerated mock type for the CampaignRepoInterface type
type CampaignRepoInterface struct {
	mock.Mock
}

// CreateCampaign provides a mock function with given fields: campaignIn
func (_m *CampaignRepoInterface) CreateCampaign(campaignIn *campaign.Domain) (campaign.Domain, error) {
	ret := _m.Called(campaignIn)

	var r0 campaign.Domain
	if rf, ok := ret.Get(0).(func(*campaign.Domain) campaign.Domain); ok {
		r0 = rf(campaignIn)
	} else {
		r0 = ret.Get(0).(campaign.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*campaign.Domain) error); ok {
		r1 = rf(campaignIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditTargetCampaign provides a mock function with given fields: id, target
func (_m *CampaignRepoInterface) EditTargetCampaign(id int, target int) (campaign.Domain, error) {
	ret := _m.Called(id, target)

	var r0 campaign.Domain
	if rf, ok := ret.Get(0).(func(int, int) campaign.Domain); ok {
		r0 = rf(id, target)
	} else {
		r0 = ret.Get(0).(campaign.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ID
func (_m *CampaignRepoInterface) FindByID(ID int) (campaign.Domain, error) {
	ret := _m.Called(ID)

	var r0 campaign.Domain
	if rf, ok := ret.Get(0).(func(int) campaign.Domain); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(campaign.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneCampaignByID provides a mock function with given fields: id
func (_m *CampaignRepoInterface) FindOneCampaignByID(id int) (campaign.Domain, error) {
	ret := _m.Called(id)

	var r0 campaign.Domain
	if rf, ok := ret.Get(0).(func(int) campaign.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(campaign.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllCampaignByUser provides a mock function with given fields:
func (_m *CampaignRepoInterface) ListAllCampaignByUser() []campaign.Users {
	ret := _m.Called()

	var r0 []campaign.Users
	if rf, ok := ret.Get(0).(func() []campaign.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Users)
		}
	}

	return r0
}

// ListCampaignsByUserID provides a mock function with given fields: id
func (_m *CampaignRepoInterface) ListCampaignsByUserID(id int) (campaign.UserCampaign, error) {
	ret := _m.Called(id)

	var r0 campaign.UserCampaign
	if rf, ok := ret.Get(0).(func(int) campaign.UserCampaign); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(campaign.UserCampaign)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaign provides a mock function with given fields: _a0
func (_m *CampaignRepoInterface) UpdateCampaign(_a0 campaign.Domain) (campaign.Domain, error) {
	ret := _m.Called(_a0)

	var r0 campaign.Domain
	if rf, ok := ret.Get(0).(func(campaign.Domain) campaign.Domain); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(campaign.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(campaign.Domain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
