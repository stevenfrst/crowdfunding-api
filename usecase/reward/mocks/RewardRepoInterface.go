// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	reward "github.com/stevenfrst/crowdfunding-api/usecase/reward"
	mock "github.com/stretchr/testify/mock"
)

// RewardRepoInterface is an autogenerated mock type for the RewardRepoInterface type
type RewardRepoInterface struct {
	mock.Mock
}

// CreateReward provides a mock function with given fields: domain
func (_m *RewardRepoInterface) CreateReward(domain reward.Domain) (reward.Domain, error) {
	ret := _m.Called(domain)

	var r0 reward.Domain
	if rf, ok := ret.Get(0).(func(reward.Domain) reward.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(reward.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reward.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRewardByID provides a mock function with given fields: id
func (_m *RewardRepoInterface) DeleteRewardByID(id int) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardByAmount provides a mock function with given fields: amount
func (_m *RewardRepoInterface) GetRewardByAmount(amount int) (int, string, error) {
	ret := _m.Called(amount)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(amount)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(amount)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(amount)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveRewardHistory provides a mock function with given fields: domain
func (_m *RewardRepoInterface) SaveRewardHistory(domain reward.DomainHistory) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(reward.DomainHistory) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReward provides a mock function with given fields: domain
func (_m *RewardRepoInterface) UpdateReward(domain reward.Domain) (reward.Domain, error) {
	ret := _m.Called(domain)

	var r0 reward.Domain
	if rf, ok := ret.Get(0).(func(reward.Domain) reward.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(reward.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reward.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
